#!/usr/bin/env groovy

@Library('enmasse-ci') _

def NODE_LABEL = null
def BUNDLE = ""

def isCRC() {
    if (env.ghprbCommentBody.contains('ocp4')
            || env.ghprbCommentBody.contains('OLM')
            || env.ghprbCommentBody.contains('olm')
            || env.ghprbCommentBody.contains('OCP4')
            || env.ghprbCommentBody.contains('crc')
            || env.ghprbCommentBody.contains('CRC')) {
        return true
    }
    return false
}

node('master') {
    stage('Set agent label') {
        echo "Github PR comment: ${env.ghprbCommentBody}"
        if (isCRC()) {
            NODE_LABEL = "enmasse-crc"
        } else {
            NODE_LABEL = params.AGENT_LABEL
        }
    }
}

pipeline {

    options {
        timeout(time: 15, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        TAG = "latest"
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true
        KUBERNETES_NAMESPACE = "enmasse-infra"
        OPENSHIFT_PASSWD = "admin"
        OPENSHIFT_USER = "admin"
    }
    agent {
        node {
            label "${NODE_LABEL}"
        }
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                script {
                    dir('enmasse') {
                        checkout scm
                    }
                    enmasse.getAmqCiRepo()
                }
            }
        }
        stage('parse parameters from comment') {
            steps {
                script {
                    if (env.ghprbCommentBody.contains('testcase=')) {
                        env.TEST_CASE = env.ghprbCommentBody.split('testcase=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.TEST_CASE = params.TEST_CASE
                    }
                    if (env.ghprbCommentBody.contains('profile=')) {
                        env.TEST_PROFILE = env.ghprbCommentBody.split('profile=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.TEST_PROFILE = params.TEST_PROFILE
                    }
                    if (env.ghprbCommentBody.contains('upgrade_from=')) {
                        env.UPGRADE_FROM = env.ghprbCommentBody.split('upgrade_from=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.UPGRADE_FROM = params.UPGRADE_FROM
                    }
                    if (isCRC()) {
                        env.OC_VERSION = "4"
                        BUNDLE = "default"
                    } else {
                        env.OC_VERSION = "3.11"
                        BUNDLE = "prekube1_16"
                    }
                    if (env.ghprbCommentBody.contains('test_only')) {
                        env.TEST_ONLY = true
                        env.DOCKER_REGISTRY = 'quay.io'
                        env.INTERNAL_REGISTRY = 'quay.io'
                        env.DOCKER_ORG = 'enmasse'
                        if (env.OC_VERSION == "4") {
                            env.OCP4_EXTERNAL_IMAGE_REGISTRY = 'default-route-openshift-image-registry.apps-crc.testing'
                            env.OCP4_INTERNAL_IMAGE_REGISTRY = 'image-registry.openshift-image-registry.svc:5000'
                        }
                    } else {
                        env.TEST_ONLY = false
                        if (env.OC_VERSION == "4") {
                            env.OCP4_EXTERNAL_IMAGE_REGISTRY = 'default-route-openshift-image-registry.apps-crc.testing'
                            env.OCP4_INTERNAL_IMAGE_REGISTRY = 'image-registry.openshift-image-registry.svc:5000'
                            env.DOCKER_REGISTRY = "${OCP4_EXTERNAL_IMAGE_REGISTRY}"
                            env.INTERNAL_REGISTRY = "${OCP4_INTERNAL_IMAGE_REGISTRY}"
                        } else {
                            env.DOCKER_REGISTRY = '172.30.1.1:5000'
                            env.INTERNAL_REGISTRY = '172.30.1.1:5000'
                        }
                        env.DOCKER_ORG = 'enmasseci'
                    }
                    if (env.ghprbCommentBody.contains('OLM')) {
                        env.INSTALL_TYPE = "OLM"
                        echo "INSTALL_TYPE: ${env.INSTALL_TYPE}"
                    }

                    def startTemplates = ""
                    for (def startVersion : env.UPGRADE_FROM.split(",")) {
                        startTemplates += "${WORKSPACE}/enmasse/templates/build/${BUNDLE}/enmasse-${startVersion},"
                    }
                    env.START_TEMPLATES = startTemplates.substring(0, startTemplates.length() - 1)

                    echo "TEST_ONLY: ${env.TEST_ONLY}"
                    echo "TEST_CASE: ${env.TEST_CASE}"
                    echo "TEST_PROFILE: ${env.TEST_PROFILE}"
                    echo "UPGRADE_FROM: ${env.UPGRADE_FROM}"
                    echo "OC_VERSION: ${env.OC_VERSION}"
                    echo "START_TEMPLATES: ${env.START_TEMPLATES}"
                }
            }
        }
        stage('Start or connect to openshift env') {
            steps {
                timeout(time: 80, unit: 'MINUTES') {
                    dir('enmasse') {
                        script {
                            enmasse.prepareLogDirs()
                            enmasse.setupTestEnvironment()
                            enmasse.exportTestEnvVariables()
                        }
                    }
                }
            }
        }
        stage('login to cluster') {
            steps {
                dir('enmasse') {
                    script {
                        kubernetes.login(env.KUBERNETES_API_URL, env.OPENSHIFT_USER, env.OPENSHIFT_PASSWD)
                    }
                }
            }
        }
        stage('build and push container images') {
            when {
                environment name: 'TEST_ONLY', value: 'false'
            }
            steps {
                dir('enmasse') {
                    script {
                        enmasse.addSystemPullerRights(env.KUBERNETES_NAMESPACE, env.DOCKER_ORG)
                        enmasse.addExternalRegistry(env.DOCKER_REGISTRY, true)
                        enmasse.buildEnmasse()
                        enmasse.pushImages()
                    }
                }
            }
        }

        //----------------------------------------------------------------------------------------------------
        // upgrade PR build
        //----------------------------------------------------------------------------------------------------
        stage('[upgrade] download released version') {
            when {
                expression { env.TEST_PROFILE == 'upgrade' }
            }
            steps {
                dir('enmasse') {
                    script {
                        for (def startVersion : env.UPGRADE_FROM.split(",")) {
                            enmasse.downloadEnmasse(startVersion)
                        }
                    }
                }
            }
        }
        stage('[upgrade] run upgrade test') {
            when {
                expression { env.TEST_PROFILE == 'upgrade' }
            }
            environment {
                UPGRADE_TEMPLATES = "${WORKSPACE}/enmasse/templates/build/${BUNDLE}/enmasse-${env.TAG}"
                DOCKER_REGISTRY = "${env.INTERNAL_REGISTRY}"
            }
            steps {
                script {
                    dir('enmasse') {
                        sh "make templates || true"
                        enmasse.runSystemtests('upgrade', 'upgrade.**')
                    }
                }
            }
        }
        //----------------------------------------------------------------------------------------------------
        // standard PR build
        //----------------------------------------------------------------------------------------------------
        stage('[PR] system tests') {
            when {
                expression { env.TEST_PROFILE != 'upgrade' }
            }
            environment {
                DOCKER_REGISTRY = "${env.INTERNAL_REGISTRY}"
            }
            steps {
                dir('enmasse') {
                    script {
                        sh "make templates || true"
                        enmasse.runSystemtests(env.TEST_PROFILE, env.TEST_CASE)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('enmasse') {
                    enmasse.postAction(env.ARTIFACTS_DIR)
                    sh "sudo ./systemtests/scripts/build_pr_response.sh ./systemtests/target/surefire-reports/ '${env.TEST_CASE}' '${env.TEST_PROFILE}' '${env.BUILD_NUMBER}' ${env.OC_VERSION} ${currentBuild.result}"
                    enmasse.postGithubPrComment("results.json")
                }
            }
        }
        failure {
            script {
                echo "build failed"
            }
        }
    }
}
